
variables:
  PASSWORD: $PWD
  ENV:
    value: "dev"
    description: "ENV name: [dev|test|e2e|uat|prod]"
  SMOKE_TEST:
    value: "@BVT_UI_SMOKE_TEST_PACK"
    description: "SMOKE_TEST tag"
  SYSTEM_TEST:
    value: "@SYSTEM_TEST"
    description: "SYSTEM_TEST tag"
  SYSTEM_INTEGRATION_TEST:
    value: "@SYSTEM_INTEGRATION_TEST"
    description: "SYSTEM_INTEGRATION_TEST tag"
  TestEnvironment:
    value: "dev"
    description: "dev|test|e2e|uat|prod"    
  BROWSER_TEST:
    value: "@SMOKE_TEST_TD"
    description: "BROWSER_TEST tag"    
  FORKCOUNT:
    value: 10
    description: "fork count"     
  osName:
    value: "Windows"
    description: "os Name"    
  osVersion:
    value: "10"
    description: "os Version"     
  browser:
    value: "Chrome"
    description: "browser name"     
  browserVersion:
    value: "113.0"
    description: "browser version"     
  serverType:
    value: "BROWSERSTACK"
    description: "browserstack config LOCAL|BROWSERSTACK"  
stages:
  - Test



include:
- project: 'genomicsengland/ngis/devops-tools'
  ref: devop
  file: /ci/dind.yml

# services: 
#     - alias: docker
#       command: 
#         - "--registry-mirror"
#         - "http://dockerhubcache.shared-services.aws.gel.ac:5002"
#       name: "docker:20.10.7-dind"


.test_suite_common: &test_suite_common
  image: maven:3.9.0-eclipse-temurin-11
  before_script:
    - apt-get update
    - apt-get install -y libexif-dev udev gnupg2
    - apt-get install -y zip
    - apt-get install -y wget
    - apt-get install -y ca-certificates
    - apt-get install -y libnss3-dev libasound2 libxss1 libappindicator3-1 libindicator7 gconf-service libgconf-2-4 libpango1.0-0 xdg-utils fonts-liberation libgbm1
    # install chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
    - apt-get update
    - apt-get install -y google-chrome-stable xvfb
    # xvfb
    - export DISPLAY=:99.0
    - Xvfb -ac $DISPLAY &
    # - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    # - apt-get install -y ./google-chrome-stable_current_amd64.deb
    - which google-chrome
    - google-chrome --version


.hto_smoke_tests:
  <<: *test_suite_common
  stage: "Test"
  script:
    - echo "SMOKE_TEST tag is ${SMOKE_TEST}"
    - sed -ie -e "s/reportmodelpassword/$PASSWORD/g" settings.xml
    - if [ -z $SMOKE_TEST ]; then echo "no tags passed, exiting"; exit 0; else mvn clean verify  -s settings.xml -DTestEnvironment=$TestEnvironment -Dcucumber.options="--tags $SMOKE_TEST" -DreportName=SmokeTest-${SMOKE_TEST}-$CI_JOB_STARTED_AT  -DlogLevel=Info -Dmaven.test.failure.ignore=true; fi
  after_script:
    - echo "SMOKE_TEST tag is ${SMOKE_TEST}"
    - echo "TestEnvironment tag is ${TestEnvironment}"  
  artifacts:
    paths:
      - ./target
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never

.hto_system_tests:
  <<: *test_suite_common
  stage: "Test"
  script:
    - echo "SYSTEM_TEST tag is ${SYSTEM_TEST}"
    - sed -ie -e "s/reportmodelpassword/$PASSWORD/g" settings.xml
    - if [ -z $SYSTEM_TEST ]; then echo "no tags passed, exiting"; exit 0; else mvn clean verify  -s settings.xml -DTestEnvironment=$TestEnvironment -Dcucumber.options="--tags $SYSTEM_TEST" -DforkCount=${FORKCOUNT} -DreportName=ST-API-$CI_JOB_STARTED_AT  -DlogLevel=Info -Dmaven.test.failure.ignore=true; fi
  after_script:
    - echo "SYSTEM_TEST tag is ${SYSTEM_TEST}"
    - echo "TestEnvironment tag is ${TestEnvironment}"  
  artifacts:
    paths:
      - ./target
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never

.hto_systemIntegration_tests:
  <<: *test_suite_common
  stage: "Test"
  script:
    - echo "SYSTEM_INTEGRATION_TEST tag is ${SYSTEM_INTEGRATION_TEST}"
    - sed -ie -e "s/reportmodelpassword/$PASSWORD/g" settings.xml
    -  if [ -z $SYSTEM_INTEGRATION_TEST ]; then echo "no tags passed, exiting"; exit 0; else mvn clean verify  -s settings.xml -DTestEnvironment=$TestEnvironment -Dcucumber.options="--tags $SYSTEM_INTEGRATION_TEST" -DforkCount=${FORKCOUNT} -DreportName=SIT-API-$CI_JOB_STARTED_AT -DlogLevel=Info -Dmaven.test.failure.ignore=true; fi
  after_script:
    - echo "SYSTEM_INTEGRATION_TEST tag is ${SYSTEM_INTEGRATION_TEST}"
    - echo "TestEnvironment tag is ${TestEnvironment}"  
  artifacts:
    paths:
      - ./target
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never


hto_smoke_tests_le:
  extends: .hto_smoke_tests
  tags:
    - pool_name:hto_qa_test 
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') &&'$CI_PIPELINE_SOURCE == "trigger"'

hto_smoke_tests_he:
  extends: .hto_smoke_tests
  tags:
    - pool_name:hto_qa_prod
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "trigger"



hto_system_tests_le:
  extends: .hto_system_tests
  tags:
    - pool_name:hto_qa_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "trigger"
      when: never

hto_system_tests_he:
  extends: .hto_system_tests
  tags:
    - pool_name:hto_qa_prod
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "trigger"
      when: never

hto_systemIntegration_tests_le:
  extends: .hto_systemIntegration_tests
  tags:
    - pool_name:hto_qa_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "trigger"
      when: never

hto_systemIntegration_tests_he:
  extends: .hto_systemIntegration_tests
  tags:
    - pool_name:hto_qa_prod
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "trigger"
      when: never



zap-automation-baseline-scan:
  stage: "Test"
  script: |
      docker pull owasp/zap2docker-stable
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r test-selection-private_full_report.html -c rules.conf   -d -I -t https://test-selection-private.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r test-ordering_full_report.html -c rules.conf   -d -I -t https://test-ordering.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r consent-assets_full_report.html -c rules.conf   -d -I -t https://consent-assets.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r consent_full_report.html -c rules.conf   -d -I -t https://consent.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r dashboard_full_report.html -c rules.conf   -d -I -t https://dashboard.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r api_full_report.html -c rules.conf   -d -I -t https://api.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r pedigree-tool-editor_full_report.html -c rules.conf   -d -I -t https://pedigree-tool-editor.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py  -r panelapp_full_report.html -c rules.conf   -d -I -t https://panelapp.genomicsengland.co.uk
  artifacts:
    name: zap-automation-baseline-scan-$CI_JOB_STARTED_AT
    paths:
      - ./*.html
    expire_in: 1 week
  tags:
    - pool_name:hto_qa_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never


zap-automation-full-scan:
  stage: "Test"
  script: |
      docker pull owasp/zap2docker-stable
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r test-selection-private_full_report.html -c rules.conf   -d -I -t https://test-selection-private.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r test-ordering_full_report.html -c rules.conf   -d -I -t https://test-ordering.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r consent-assets_full_report.html -c rules.conf   -d -I -t https://consent-assets.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r consent_full_report.html -c rules.conf   -d -I -t https://consent.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r dashboard_full_report.html -c rules.conf   -d -I -t https://dashboard.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r api_full_report.html -c rules.conf   -d -I -t https://api.test.genomics.nhs.uk
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py  -r pedigree-tool-editor_full_report.html -c rules.conf   -d -I -t https://pedigree-tool-editor.test.genomics.nhs.uk


  artifacts:
    name: zap-automation-full-scan-$CI_JOB_STARTED_AT
    paths:
      - ./*.html
    expire_in: 1 week
  tags:
    - pool_name:hto_qa_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never

.browserstacktests:
  <<: *test_suite_common
  stage: "Test"
  variables:
    EXECUTION_MODE: $serverType
    SUPER_USERNAME: "Cancel.Test2@ngisnonprod.onmicrosoft.com"
    SUPER_PASSWORD: $SUPER_PASSWORD
    BROWSERSTACK_USERNAME: $BROWSERSTACK_USERNAME
    BROWSERSTACK_ACCESS_KEY: $BROWSERSTACK_ACCESS_KEY
    BROWSERSTACK_BUILD: "${CI_PROJECT_NAME} - ${COMMIT_SHA} - ${CI_PIPELINE_CREATED_AT}"

  before_script:
    - apt-get update && apt-get install curl libxi6 libgconf-2-4 awscli jq wget netcat unzip -y
    # Download the browserstack binary file
    - wget "https://bstack-local-prod.s3.amazonaws.com/binaries/v8.5.0/BrowserStackLocal-linux-x64.zip"
    #For OS X systems, use the following command
    #- wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-darwin-x64.zip"
    # Unzip the BrowserStack Local binary file
    - unzip BrowserStackLocal-linux-x64.zip
    # Run the file with your access key
    - chmod +x BrowserStackLocal
    - ./BrowserStackLocal --key $BROWSERSTACK_ACCESS_KEY --daemon start
    - >
     if [ "$ENV" = "dev" ]; then 
      nc -zv  dashboard.int.ngis.io 443
     else
      nc -zv  dashboard.${ENV}.genomics.nhs.uk 443 
     fi
  script:
    -  sed -ie -e "s/reportmodelpassword/$PASSWORD/g" settings.xml
    - mvn -s settings.xml -Dcucumber.options="--tags $BROWSER_TEST" clean verify  -DserverType=${EXECUTION_MODE}  -DTestEnvironment=${TestEnvironment} -DreportName=BS-${browser}-${browserVersion}-${osName}-${osVersion}  -Dbrowser=${browser} -DforkCount=${FORKCOUNT} -DbrowserVersion=${browserVersion} -DosName=${osName} -DosVersion=${osVersion} -Dmaven.test.failure.ignore=true

    - export browser='Firefox'
    - export browserVersion='111'
    - mvn -s settings.xml -Dcucumber.options="--tags $BROWSER_TEST" clean verify  -DserverType=${EXECUTION_MODE}  -DTestEnvironment=${TestEnvironment} -DreportName=BS-${browser}-${browserVersion}-${osName}-${osVersion}  -Dbrowser=${browser} -DforkCount=${FORKCOUNT} -DbrowserVersion=${browserVersion} -DosName=${osName} -DosVersion=${osVersion} -Dmaven.test.failure.ignore=true

    - export browser='Edge'
    - export browserVersion='114'
    - mvn -s settings.xml -Dcucumber.options="--tags $BROWSER_TEST" clean verify  -DserverType=${EXECUTION_MODE}  -DTestEnvironment=${TestEnvironment} -DreportName=BS-${browser}-${browserVersion}-${osName}-${osVersion}  -Dbrowser=${browser} -DforkCount=${FORKCOUNT} -DbrowserVersion=${browserVersion} -DosName=${osName} -DosVersion=${osVersion} -Dmaven.test.failure.ignore=true

    
  after_script:
    - ./BrowserStackLocal --key "${BROWSERSTACK_ACCESS_KEY}" --daemon stop
    - >
     echo ENV ${ENV} BROWSER_TEST tag is  ${BROWSER_TEST} browser tag is  ${browser} browserVersion tag is  ${browserVersion} osName tag is  ${osName} osVersion tag is  ${osVersion} EXECUTION_MODE tag is  ${EXECUTION_MODE} osVersion tag is  ${osVersion} FORKCOUNT tag is  ${FORKCOUNT} TestEnvironment tag is  ${TestEnvironment}
  artifacts:
    name: BS-${browser}-${browserVersion}-${osName}-${osVersion}
    paths:
      - ./target
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
   



browserstacktests_le:
  extends: .browserstacktests
  tags:
    - pool_name:hto_qa_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'test' || $ENV == 'dev' || $ENV == 'e2e') && $CI_PIPELINE_SOURCE == "trigger"
      when: never


browserstacktests_he:
  extends: .browserstacktests
  tags:
    - pool_name:hto_qa_prod
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "schedule"
      # when: always # is a default value
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: ($ENV == 'prod' || $ENV == 'uat') && $CI_PIPELINE_SOURCE == "trigger"
      when: never
