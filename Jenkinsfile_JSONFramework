pipeline {
    agent { label 'chrome' }
    parameters {
        choice(name: 'TestEnvironment', choices: "e2e\ne2elatest", description: 'Defines the environment on which the test will be run')
        string(name: 'Tag', defaultValue: '@ReferralFromJson', description: 'Tag of test to execute- @RDReferralFromJson, @CancerReferralFromJson, @RDCase1-10, @CancerCase1-10')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                // Clean workspace before build
                cleanWs()
                checkout([
                        $class           : 'GitSCM', branches: [[name: 'ReferralFromJson']],
                        userRemoteConfigs: [[url: 'https://github.com/genomicsengland/ngis_ui_auto_tests.git', credentialsId: '7f90912e-1e7e-48dd-81b4-3ff5da62ed7d']]
                ])
            }
        }
        stage('UI Referral Creation') {
            steps {
                wrap([$class: 'Xvfb', autoDisplayName: true, displayNameOffset: 0, timeout: 0, screen: '1920x1080x24']) {
                    script {
                        try {
                            sh "mvn -f pom.xml -s settings.xml -Dcucumber.options='--tags ${Tag}' clean verify -DTestEnvironment=${TestEnvironment} -DparallelScheme='SCENARIO' -ntp"
                        } catch (err) {
                            currentBuild.result = 'FAILURE'
                        }
                        echo currentBuild.result
                    }
                }
            }
        }
        stage('Zip and Archive and Publish Results') {
            steps {
                echo "Archiving build ran at ${BUILD_TIMESTAMP}"
                fileOperations([fileZipOperation('target'), fileRenameOperation(destination: 'NGIS_UI_E2E_ReferralCreation_${BUILD_TIMESTAMP}.zip', source: 'target.zip')])
                archiveArtifacts "NGIS_UI_E2E_ReferralCreation_${BUILD_TIMESTAMP}.zip"
                archiveArtifacts artifacts: 'target/test-report/*.*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'target/*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'JsonReferrals.json ', allowEmptyArchive: true
                archiveArtifacts artifacts: 'target/NGIS_UI_Snapshots/*', allowEmptyArchive: true
            }
        }

//        stage('Publish and Archive Results') {
//            steps {
//                archiveArtifacts artifacts: 'target/test-report/*.*', allowEmptyArchive: true
//                archiveArtifacts artifacts: 'target/*', allowEmptyArchive: true
//                // archiveArtifacts artifacts:'JsonReferralID.text' , allowEmptyArchive: true
//                archiveArtifacts artifacts: 'JsonReferrals.json ', allowEmptyArchive: true
//                archiveArtifacts artifacts: 'target/NGIS_UI_Snapshots/*', allowEmptyArchive: true
//            }
//        }
    }
//    post {
//        success {
//            script {
//                sh 'echo success'
//                sh 'echo Attempt to run CSV generation'
//                build wait: false, job: '2-Json_CSV_Creation', parameters: [string(name: 'TestEnvironment', value: "${params.TestEnvironment}"), string(name: 'Tag', value: "${params.Tag}")]
//            }
//        }
//    }
}